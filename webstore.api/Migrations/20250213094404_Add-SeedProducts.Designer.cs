// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webstore.api.Data;

#nullable disable

namespace webstore.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250213094404_Add-SeedProducts")]
    partial class AddSeedProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("webstore.api.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Категория  2",
                            Description = "Национальный формированию количественный мира концепция нашей организационной подготовке.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Гранитный Клатч",
                            Price = 9297.1299999999992,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Категория  2",
                            Description = "Рост забывать условий.",
                            Image = "https://placehold.co/200",
                            Name = "Интеллектуальный Пластиковый Берет",
                            Price = 6162.1899999999996,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Категория  1",
                            Description = "Инновационный целесообразности стороны участниками профессионального соответствующих.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Пластиковый Портмоне",
                            Price = 5016.0500000000002,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Категория  3",
                            Description = "Для реализация обеспечивает требует занимаемых выполнять технологий позиции следует рост.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Резиновый Ножницы",
                            Price = 7976.4399999999996,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Категория  2",
                            Description = "Важные активизации поставленных кругу плановых.",
                            Image = "https://placehold.co/200",
                            Name = "Великолепный Резиновый Плащ",
                            Price = 3918.71,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Категория  1",
                            Description = "Прежде за путь сфера однако проверки демократической другой.",
                            Image = "https://placehold.co/200",
                            Name = "Лоснящийся Хлопковый Сабо",
                            Price = 7678.4300000000003,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Категория  3",
                            Description = "Укрепления качества уточнения национальный начало значение изменений.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Резиновый Плащ",
                            Price = 5417.6899999999996,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Категория  1",
                            Description = "Соответствующей уровня процесс.",
                            Image = "https://placehold.co/200",
                            Name = "Лоснящийся Пластиковый Компьютер",
                            Price = 5797.7799999999997,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Категория  1",
                            Description = "Важные экономической зависит практика участниками также целесообразности рамки уровня всего.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Деревянный Компьютер",
                            Price = 3664.25,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Категория  1",
                            Description = "Идейные концепция занимаемых.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Резиновый Майка",
                            Price = 4293.9700000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Категория  3",
                            Description = "Дальнейших реализация задания воздействия.",
                            Image = "https://placehold.co/200",
                            Name = "Эргономичный Резиновый Плащ",
                            Price = 5794.1499999999996,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Категория  2",
                            Description = "Развития а для.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Бетонный Майка",
                            Price = 1345.21,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Категория  2",
                            Description = "Важную показывает этих кадров шагов принимаемых.",
                            Image = "https://placehold.co/200",
                            Name = "Невероятный Пластиковый Стул",
                            Price = 4779.4700000000003,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Категория  2",
                            Description = "Концепция существующий финансовых направлений социально-ориентированный прогрессивного играет способствует уточнения.",
                            Image = "https://placehold.co/200",
                            Name = "Фантастический Пластиковый Сабо",
                            Price = 1918.8800000000001,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Категория  2",
                            Description = "Различных обучения повышение принимаемых.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Бетонный Клатч",
                            Price = 7883.7399999999998,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Категория  2",
                            Description = "Количественный дальнейшее оценить потребностям общественной.",
                            Image = "https://placehold.co/200",
                            Name = "Свободный Неодимовый Компьютер",
                            Price = 7099.0100000000002,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Категория  3",
                            Description = "Эксперимент укрепления всего.",
                            Image = "https://placehold.co/200",
                            Name = "Маленький Бетонный Свитер",
                            Price = 6744.1499999999996,
                            SpecialTag = "Рекомендуемый"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Категория  2",
                            Description = "Различных оценить модернизации уточнения.",
                            Image = "https://placehold.co/200",
                            Name = "Практичный Меховой Кепка",
                            Price = 8350.3099999999995,
                            SpecialTag = "Популярный"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Категория  1",
                            Description = "От высшего кадров показывает.",
                            Image = "https://placehold.co/200",
                            Name = "Большой Хлопковый Шарф",
                            Price = 7798.4499999999998,
                            SpecialTag = "Новинка"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Категория  3",
                            Description = "Что кадровой отметить обучения.",
                            Image = "https://placehold.co/200",
                            Name = "Потрясающий Меховой Кулон",
                            Price = 2854.75,
                            SpecialTag = "Популярный"
                        });
                });

            modelBuilder.Entity("webstore.api.Model.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
